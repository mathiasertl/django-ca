# This file is part of django-ca (https://github.com/mathiasertl/django-ca).
#
# django-ca is free software: you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# django-ca is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along with django-ca. If not, see
# <http://www.gnu.org/licenses/>.

"""Profile configuration model."""

from typing import Annotated, Any, Literal

from pydantic import BaseModel, BeforeValidator, Field, model_validator

from django_ca.pydantic import NameModel
from django_ca.pydantic.extensions import ConfigurableExtensionModel
from django_ca.pydantic.type_aliases import DayValidator, PositiveTimedelta, PromiseTypeAlias
from django_ca.typehints import ConfigurableExtensionKey, Self, SignatureHashAlgorithmName

ExtensionKey = ConfigurableExtensionKey
ExtensionValue = ConfigurableExtensionModel


def set_extension_type_validator(value: Any) -> Any:
    """Set the extension type for the extension."""
    if isinstance(value, dict):  # pragma: no branch
        for ext_key, ext_value in value.items():
            if isinstance(ext_value, dict):
                # Don't check if "type" is already in the dict to ensure consistency between the two values.
                ext_value["type"] = ext_key
    return value


ExtensionDict = Annotated[
    dict[ConfigurableExtensionKey, ConfigurableExtensionModel | None],
    BeforeValidator(set_extension_type_validator),
]


class ProfileConfigurationModel(BaseModel):
    """Configuration model for profiles."""

    description: PromiseTypeAlias = ""  # type: ignore[assignment]  # TypeAlias will update default to promise
    subject: NameModel | Literal[False] | None = None
    algorithm: SignatureHashAlgorithmName | None = None
    extensions: ExtensionDict = Field(default_factory=dict)
    expires: Annotated[PositiveTimedelta, DayValidator] | None = None
    autogenerated: bool = False
    add_crl_url: bool = True
    add_ocsp_url: bool = True
    add_issuer_url: bool = True
    add_issuer_alternative_name: bool = True

    @model_validator(mode="after")
    def validate_extensions(self) -> Self:
        """Validate the extension dictionary."""
        # pylint: disable-next=no-member  # issue with pylint
        for key, value in self.extensions.items():
            if value is None:
                continue
            if key != value.type:
                raise ValueError(f"{key}: {value.type}: Extension does not match key.")
        return self
