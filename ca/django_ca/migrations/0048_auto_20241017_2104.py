# Generated by Django 5.1.2 on 2024-10-17 19:04
import json
from datetime import timedelta

from cryptography import x509
from cryptography.hazmat.primitives.serialization import Encoding

from django.conf import settings
from django.core.cache import cache
from django.db import migrations
from django.utils import timezone
from django.utils.timezone import make_naive

from django_ca.utils import get_crl_cache_key


def migrate_crl_number(apps, schema_editor):
    CertificateAuthority = apps.get_model("django_ca", "CertificateAuthority")
    CertificateRevocationList = apps.get_model("django_ca", "CertificateRevocationList")

    for ca in CertificateAuthority.objects.filter(enabled=True):
        crl_number_data = json.loads(ca.crl_number)
        for scope, crl_number in crl_number_data.get("scope", {}).items():
            only_contains_ca_certs = False
            only_contains_user_certs = False
            only_contains_attribute_certs = False
            if scope == "ca":
                only_contains_ca_certs = True
            elif scope == "user":
                only_contains_user_certs = True
            elif scope == "attribute":
                only_contains_attribute_certs = True

            cache_key = get_crl_cache_key(
                ca.serial,
                Encoding.DER,
                only_contains_ca_certs=only_contains_ca_certs,
                only_contains_user_certs=only_contains_user_certs,
                only_contains_attribute_certs=only_contains_attribute_certs,
                only_some_reasons=None,  # not supported in old format
            )

            # Retrieve data from cache, if possible.
            try:
                crl_data = cache.get(cache_key)
            except Exception:
                crl_data = None

            # If CRL was in the cache, set data, next_update and last_update.
            if crl_data is not None:
                crl = x509.load_der_x509_crl(crl_data)
                next_update = crl.next_update_utc
                last_update = crl.last_update_utc

                if settings.USE_TZ is False:
                    next_update = make_naive(next_update)
                    last_update = make_naive(last_update)

            # If we have no data from the cache, we can only set a useless default data
            else:
                last_update = timezone.now() - timedelta(days=2)
                next_update = timezone.now() - timedelta(days=1)

            # Create CRL object
            CertificateRevocationList.objects.create(
                ca=ca,
                number=crl_number,
                last_update=last_update,
                next_update=next_update,
                only_contains_ca_certs=only_contains_ca_certs,
                only_contains_user_certs=only_contains_user_certs,
                only_contains_attribute_certs=only_contains_attribute_certs,
                data=crl_data,
            )


class Migration(migrations.Migration):
    dependencies = [
        ("django_ca", "0047_certificaterevocationlist"),
    ]

    operations = [migrations.RunPython(migrate_crl_number, migrations.RunPython.noop)]
