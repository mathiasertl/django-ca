# This file is part of django-ca (https://github.com/mathiasertl/django-ca).
#
# django-ca is free software: you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# django-ca is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along with django-ca. If not, see
# <http://www.gnu.org/licenses/>.

"""Command to clean all files generated by various processes.

This module takes care not to require any external imports, because it is also used in (minimal) Docker
environments.
"""

import os
import shutil
import sys

if __name__ == "__main__":
    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

# pylint: disable=wrong-import-position  # need sys.path insert above
from devscripts import config
from devscripts.commands import DevCommand

# pylint: enable=wrong-import-position


def cleanup():
    """Main cleanup function."""

    def rm(path):  # pylint: disable=invalid-name; rm() is just descriptive
        """Remove a file/dir if it exists."""
        rm_path = config.ROOT_DIR / path
        if not rm_path.exists():
            return

        if rm_path.is_dir():
            print("rm -r", rm_path)
            shutil.rmtree(rm_path)
        else:
            print("rm", rm_path)
            rm_path.unlink()

    rm("pip-selfcheck.json")
    rm("geckodriver.log")
    rm("docs/build")
    rm(".tox")
    rm("ca/files")
    rm("ca/geckodriver.log")
    rm("dist")
    rm("build")
    rm(".coverage")
    rm(".docker")
    rm(".mypy_cache")
    rm("contrib/selenium/geckodriver")
    rm("docs/source/_files/docker-compose.yml")

    for path in config.ROOT_DIR.rglob("__pycache__/"):
        shutil.rmtree(path)
    for path in config.ROOT_DIR.rglob("*.pyc"):
        path.unlink()
    for path in config.ROOT_DIR.rglob("*.sqlite3"):
        path.unlink()
    for path in config.ROOT_DIR.rglob("*.egg-info/"):
        shutil.rmtree(path)


class Command(DevCommand):
    """Remove files generated by various build processes."""

    def handle(self, args):
        cleanup()


if __name__ == "__main__":
    cleanup()
